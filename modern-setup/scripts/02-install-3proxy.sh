#!/bin/bash
#
# 02-install-3proxy.sh - Устанавливает и настраивает 3proxy
# Может запускаться повторно - проверяет существование перед установкой
#

set -e

SCRIPT_NAME="02-install-3proxy"
PROXY_VERSION="0.9.4"
PROXY_USER="proxy3"

# Флаги компиляции для совместимости с новыми версиями GCC
export CFLAGS="-Wno-error=incompatible-pointer-types"
PROXY_DIR="/etc/3proxy"
PROXY_CFG="$PROXY_DIR/3proxy.cfg"
PROXY_BIN="/usr/local/bin/3proxy"
PROXY_LOG_DIR="/var/log/3proxy"
SYSTEMD_SERVICE="/etc/systemd/system/3proxy.service"

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[${SCRIPT_NAME}]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[${SCRIPT_NAME}]${NC} $1"
}

log_error() {
    echo -e "${RED}[${SCRIPT_NAME}]${NC} $1"
}

check_root() {
    if [ "$(id -u)" != "0" ]; then
        log_error "Этот скрипт должен быть запущен с правами root"
        exit 1
    fi
}

# Установка необходимых пакетов
install_dependencies() {
    log_info "Проверка и установка зависимостей..."

    local packages="build-essential wget tar gzip curl net-tools gcc make libc6-dev"

    if command -v apt-get >/dev/null 2>&1; then
        apt-get update -qq
        apt-get install -y $packages
    elif command -v yum >/dev/null 2>&1; then
        yum install -y $packages
    else
        log_error "Неподдерживаемый менеджер пакетов"
        exit 1
    fi

    log_info "Зависимости установлены"
}

# Создание пользователя для 3proxy
create_proxy_user() {
    if id "$PROXY_USER" >/dev/null 2>&1; then
        log_warn "Пользователь $PROXY_USER уже существует"
    else
        log_info "Создание пользователя $PROXY_USER..."
        useradd -r -s /bin/false "$PROXY_USER"
        log_info "Пользователь $PROXY_USER создан"
    fi
}

# Загрузка и компиляция 3proxy
install_3proxy() {
    if [ -f "$PROXY_BIN" ]; then
        local installed_version=$($PROXY_BIN --version 2>&1 | head -n1 || echo "unknown")
        log_warn "3proxy уже установлен: $installed_version"
        log_info "Пропускаем установку 3proxy (для переустановки удалите $PROXY_BIN)"
        return 0
    fi

    log_info "Загрузка 3proxy ${PROXY_VERSION}..."

    cd /tmp
    rm -rf "3proxy-${PROXY_VERSION}" "3proxy-${PROXY_VERSION}.tar.gz"

    # Правильная ссылка на релиз GitHub
    local download_url="https://github.com/z3APA3A/3proxy/archive/refs/tags/${PROXY_VERSION}.tar.gz"

    if ! wget --quiet --show-progress "$download_url" -O "3proxy-${PROXY_VERSION}.tar.gz"; then
        log_error "Ошибка загрузки 3proxy с $download_url"
        exit 1
    fi

    log_info "Распаковка и компиляция 3proxy..."

    if ! tar xzf "3proxy-${PROXY_VERSION}.tar.gz"; then
        log_error "Ошибка распаковки архива"
        exit 1
    fi

    cd "3proxy-${PROXY_VERSION}"

    # Компиляция для Linux с флагами совместимости (без ODBC)
    log_info "Компиляция 3proxy (это может занять несколько минут)..."

    # Добавляем флаги в Makefile.Linux перед компиляцией
    sed -i 's/CFLAGS =/CFLAGS = -Wno-error=incompatible-pointer-types/' Makefile.Linux

    if ! make -f Makefile.Linux; then
        log_error "Ошибка компиляции 3proxy"
        exit 1
    fi

    # Проверка что бинарник создан
    if [ ! -f "bin/3proxy" ]; then
        log_error "Бинарный файл bin/3proxy не был создан после компиляции"
        exit 1
    fi

    log_info "Установка 3proxy..."
    mkdir -p "$PROXY_DIR"
    mkdir -p "$PROXY_LOG_DIR"

    cp bin/3proxy "$PROXY_BIN"
    chmod +x "$PROXY_BIN"

    chown -R "$PROXY_USER:$PROXY_USER" "$PROXY_LOG_DIR"

    log_info "3proxy установлен: $($PROXY_BIN --version 2>&1 | head -n1)"

    # Очистка
    cd /tmp
    rm -rf "3proxy-${PROXY_VERSION}" "3proxy-${PROXY_VERSION}.tar.gz"
}

# Создание конфигурации 3proxy
create_config() {
    if [ -f "$PROXY_CFG" ]; then
        log_warn "Конфигурация $PROXY_CFG уже существует"

        # Создаём бэкап
        local backup="${PROXY_CFG}.backup.$(date +%s)"
        cp "$PROXY_CFG" "$backup"
        log_info "Создан бэкап: $backup"
    fi

    log_info "Создание базовой конфигурации 3proxy..."

    # Получаем UID/GID пользователя proxy3
    local proxy_uid=$(id -u "$PROXY_USER")
    local proxy_gid=$(id -g "$PROXY_USER")

    cat > "$PROXY_CFG" << EOF
# 3proxy configuration for multi-modem setup
# Auto-generated by modern-setup

# Run as user proxy3
setgid ${proxy_gid}
setuid ${proxy_uid}

# DNS servers
nserver 8.8.8.8
nserver 8.8.4.4
nserver 77.88.8.8

# Cache and timeouts
nscache 65536
timeouts 1 5 30 60 180 1800 15 60

# Connection limits
maxconn 200000
noforce

# User authentication
users viking01:CL:A000000a

# Logging
log ${PROXY_LOG_DIR}/3proxy.log D
logformat "- +_L%t.%. %N.%p %E %U %C:%c %R:%r %O %I %h %T"
rotate 30

# Authentication mode
auth cache strong

# Static proxy configurations for standard modem IPs (192.168.X.100)
# HTTP proxies on ports 8002-8020, SOCKS proxies on ports 9002-9020
# These will be updated dynamically if actual IP differs from 192.168.X.100

# Subnet 192.168.2.x
proxy -n -a -p8002 -e192.168.2.100
socks -n -a -p9002 -e192.168.2.100

# Subnet 192.168.3.x
proxy -n -a -p8003 -e192.168.3.100
socks -n -a -p9003 -e192.168.3.100

# Subnet 192.168.4.x
proxy -n -a -p8004 -e192.168.4.100
socks -n -a -p9004 -e192.168.4.100

# Subnet 192.168.5.x
proxy -n -a -p8005 -e192.168.5.100
socks -n -a -p9005 -e192.168.5.100

# Subnet 192.168.6.x
proxy -n -a -p8006 -e192.168.6.100
socks -n -a -p9006 -e192.168.6.100

# Subnet 192.168.7.x
proxy -n -a -p8007 -e192.168.7.100
socks -n -a -p9007 -e192.168.7.100

# Subnet 192.168.8.x
proxy -n -a -p8008 -e192.168.8.100
socks -n -a -p9008 -e192.168.8.100

# Subnet 192.168.9.x
proxy -n -a -p8009 -e192.168.9.100
socks -n -a -p9009 -e192.168.9.100

# Subnet 192.168.10.x
proxy -n -a -p8010 -e192.168.10.100
socks -n -a -p9010 -e192.168.10.100

# Subnet 192.168.11.x
proxy -n -a -p8011 -e192.168.11.100
socks -n -a -p9011 -e192.168.11.100

# Subnet 192.168.12.x
proxy -n -a -p8012 -e192.168.12.100
socks -n -a -p9012 -e192.168.12.100

# Subnet 192.168.13.x
proxy -n -a -p8013 -e192.168.13.100
socks -n -a -p9013 -e192.168.13.100

# Subnet 192.168.14.x
proxy -n -a -p8014 -e192.168.14.100
socks -n -a -p9014 -e192.168.14.100

# Subnet 192.168.15.x
proxy -n -a -p8015 -e192.168.15.100
socks -n -a -p9015 -e192.168.15.100

# Subnet 192.168.16.x
proxy -n -a -p8016 -e192.168.16.100
socks -n -a -p9016 -e192.168.16.100

# Subnet 192.168.17.x
proxy -n -a -p8017 -e192.168.17.100
socks -n -a -p9017 -e192.168.17.100

# Subnet 192.168.18.x
proxy -n -a -p8018 -e192.168.18.100
socks -n -a -p9018 -e192.168.18.100

# Subnet 192.168.19.x
proxy -n -a -p8019 -e192.168.19.100
socks -n -a -p9019 -e192.168.19.100

# Subnet 192.168.20.x
proxy -n -a -p8020 -e192.168.20.100
socks -n -a -p9020 -e192.168.20.100

EOF

    chmod 644 "$PROXY_CFG"
    log_info "Базовая конфигурация создана: $PROXY_CFG"
}

# Создание systemd service
create_systemd_service() {
    if [ -f "$SYSTEMD_SERVICE" ]; then
        log_warn "Systemd service уже существует: $SYSTEMD_SERVICE"
    else
        log_info "Создание systemd service..."

        cat > "$SYSTEMD_SERVICE" << EOF
[Unit]
Description=3proxy tiny proxy server
After=network.target
Documentation=https://github.com/z3APA3A/3proxy

[Service]
Type=simple
ExecStart=${PROXY_BIN} ${PROXY_CFG}
Restart=on-failure
RestartSec=5s

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=${PROXY_LOG_DIR}
ReadWritePaths=${PROXY_DIR}

# Resource limits
LimitNOFILE=1048576
LimitNPROC=1000000

[Install]
WantedBy=multi-user.target
EOF

        systemctl daemon-reload
        log_info "Systemd service создан: $SYSTEMD_SERVICE"
    fi
}

# Создание алиасов для удобства
create_aliases() {
    local bashrc="/root/.bashrc"
    local alias_3p='alias 3p="ps aux | grep 3proxy"'
    local alias_3proxy='alias 3proxyctl="systemctl"'

    log_info "Добавление алиасов в $bashrc..."

    if ! grep -qF "$alias_3p" "$bashrc" 2>/dev/null; then
        echo "" >> "$bashrc"
        echo "# 3proxy aliases" >> "$bashrc"
        echo "$alias_3p" >> "$bashrc"
        log_info "Добавлен алиас: 3p"
    fi

    if ! grep -qF "$alias_3proxy" "$bashrc" 2>/dev/null; then
        echo "$alias_3proxy" >> "$bashrc"
        log_info "Добавлен алиас: 3proxyctl"
    fi
}

# Включение и запуск сервиса
enable_service() {
    log_info "Включение сервиса 3proxy..."

    systemctl enable 3proxy.service

    if systemctl is-active --quiet 3proxy.service; then
        log_warn "Сервис 3proxy уже запущен, перезапускаем..."
        systemctl restart 3proxy.service
    else
        log_info "Запуск сервиса 3proxy..."
        systemctl start 3proxy.service
    fi

    sleep 2

    if systemctl is-active --quiet 3proxy.service; then
        log_info "Сервис 3proxy успешно запущен"
    else
        log_error "Не удалось запустить сервис 3proxy"
        systemctl status 3proxy.service
        exit 1
    fi
}

# Главная функция
main() {
    log_info "Начало установки 3proxy..."

    check_root
    install_dependencies
    create_proxy_user
    install_3proxy
    create_config
    create_systemd_service
    create_aliases
    enable_service

    log_info "Установка 3proxy завершена!"
    log_info "Команды для управления:"
    log_info "  systemctl status 3proxy   - статус"
    log_info "  systemctl restart 3proxy  - перезапуск"
    log_info "  systemctl stop 3proxy     - остановка"
    log_info "  tail -f ${PROXY_LOG_DIR}/3proxy.log - логи"
}

main "$@"
